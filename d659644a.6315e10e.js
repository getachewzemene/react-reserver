(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{112:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),b=r,g=p["".concat(s,".").concat(b)]||p[b]||u[b]||o;return t?a.a.createElement(g,i(i({ref:n},c),{},{components:t})):a.a.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return d}));var r=t(2),a=t(6),o=(t(0),t(112)),s={id:"draganddelete",title:"Drag & Delete Bar",sidebar_label:"Drag & Delete"},i={unversionedId:"draganddelete",id:"draganddelete",isDocsHomePage:!1,title:"Drag & Delete Bar",description:"The bar is very versatile in this example we enable dragging and deleting of the bar.",source:"@site/docs\\draganddelete.md",slug:"/draganddelete",permalink:"/react-reserver/docs/draganddelete",version:"current",sidebar_label:"Drag & Delete",sidebar:"docs",previous:{title:"Bar Basics",permalink:"/react-reserver/docs/basicbar"},next:{title:"Resolve Date Time",permalink:"/react-reserver/docs/resolvedatetime"}},l=[],c={rightToc:l};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The bar is very versatile in this example we enable dragging and deleting of the bar."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Create a bar by clicking and dragging across the grid."),Object(o.b)("li",{parentName:"ul"},"right click the bar and select 'enable drag'"),Object(o.b)("li",{parentName:"ul"},"start dragging")),Object(o.b)("p",null,"This is not the most beautiful way to do dragging. I'll be adding a better example later on. "),Object(o.b)("p",null,"In order to delete, right click and hit delete"),Object(o.b)("iframe",{src:"https://codesandbox.io/embed/draganddelete-v9794?fontsize=14&hidenavigation=1&theme=dark&view=preview",style:{width:"100%",height:600,border:0,borderRadius:4,overflow:"hidden"},title:"DragAndDelete",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),";",Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:"file=../src/examples/DragBar.js",file:"../src/examples/DragBar.js"}),"import React, { useState } from 'react'\nimport Reserver, {\n  Tag,\n  Bar,\n  useReserver,\n  reserverReducer,\n  createBar,\n  getPosition,\n  resizeBars\n} from 'react-reserver'\nimport styles from './basicexamples.module.css'\nimport { getRandomColor, isObjectEmpty } from './helpers'\nimport {\n  SimpleContextMenu,\n  ContextMenuItem\n} from '../components/SimpleContextMenu'\n\nimport '../components/SimpleContextMenu/menuStyle.css'\n\nimport { usePrevious } from './hooks'\n\nexport default function DragBar(props) {\n  const [selectedBar, setSelectedBar] = useState({})\n  const prevSelected = usePrevious(selectedBar)\n  const [contextMenuState, setContextMenuState] = useState({\n    visibile: false,\n    top: 0,\n    left: 0\n  })\n  const {\n    bars,\n    isEditing,\n    setIsEditing,\n    addBar,\n    setBars,\n    editBar,\n    deleteBar\n  } = useReserver(reserverReducer, [])\n\n  function hoverBar(newLocation) {\n    const tBars = bars.map((bar) => {\n      if (bar.draggable) {\n        return { ...bar, ...newLocation }\n      }\n      return bar\n    })\n    setBars(tBars)\n  }\n\n  function setDrag(bar, event) {\n    setSelectedBar(bar)\n    setContextMenuState({\n      visible: true,\n      top: event.clientY,\n      left: event.clientX\n    })\n  }\n\n  return (\n    <>\n      <Reserver\n        cellClassName={styles.row_cell}\n        mouseDragOverCell={(props) => {\n          hoverBar(props.cell)\n        }}\n        mouseDownCell={(props) => {\n          const newbar = createBar(props.dimension, props.cell)\n          newbar.style = { background: getRandomColor() }\n          addBar(newbar)\n          setIsEditing(true)\n        }}\n        mouseEnterCell={(props) => {\n          if (isEditing) {\n            const nBars = resizeBars(bars, props)\n            setBars(nBars)\n          }\n        }}\n        mouseUpCell={() => {\n          const dBars = bars.map((bar) => {\n            if (bar.editing) {\n              return {\n                ...bar,\n                editing: false,\n                style: { ...bar.style, pointerEvents: 'auto' }\n              }\n            }\n            return bar\n          })\n\n          setBars(dBars)\n          setIsEditing(false)\n        }}\n      >\n        {({ dimension }) => {\n          return bars.map((bar) => {\n            console.log(bar.length)\n            return (\n              <Bar\n                onDragStart={() => {\n                  editBar({ ...bar, dragging: true })\n                }}\n                onContextMenu={(event) => {\n                  event.preventDefault()\n                  setDrag(bar, event)\n                }}\n                key={bar.id}\n                {...bar}\n                style={{\n                  ...bar.style,\n\n                  ...getPosition(bar.row, bar.column, bar.dimension)\n                }}\n              >\n                <Tag style={{ color: '#fff', width: dimension * bar.length }}>\n                  {bar.draggable && 'Start Dragging'}\n                </Tag>\n              </Bar>\n            )\n          })\n        }}\n      </Reserver>\n      <SimpleContextMenu className='cmenu' {...contextMenuState}>\n        <ContextMenuItem\n          onClick={() => {\n            if (\n              !isObjectEmpty(prevSelected) &&\n              prevSelected.id !== selectedBar.id\n            ) {\n              const tBars = bars.map((bar) => {\n                return { ...bar, draggable: false }\n              })\n              setBars(tBars)\n            }\n            editBar({ ...selectedBar, draggable: !selectedBar.draggable })\n            setContextMenuState({ visibile: false })\n          }}\n        >\n          {selectedBar.draggable ? 'Disable' : 'Enable'} Drag\n        </ContextMenuItem>\n        <ContextMenuItem\n          onClick={() => {\n            deleteBar(selectedBar)\n            setContextMenuState({ visibile: false })\n          }}\n        >\n          Delete\n        </ContextMenuItem>\n      </SimpleContextMenu>\n    </>\n  )\n}\n")))}d.isMDXComponent=!0}}]);